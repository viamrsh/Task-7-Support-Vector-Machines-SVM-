from google.colab import drive
drive.mount('/content/drive')


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.decomposition import PCA

# Load and Prepare Dataset
df = pd.read_csv('/content/drive/MyDrive/breast-cancer.csv')

# Drop 'id' if exists
if 'id' in df.columns:
    df.drop(columns=['id'], inplace=True)

# Map diagnosis column to numeric
df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

# Display class distribution
sns.countplot(x='diagnosis', data=df)
plt.title("Class Distribution (Malignant = 1, Benign = 0)")
plt.show()

# Correlation heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), cmap='coolwarm', linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

# Split Data
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize Features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Linear SVM
linear_svm = SVC(kernel='linear', C=1)
linear_svm.fit(X_train_scaled, y_train)
y_pred_linear = linear_svm.predict(X_test_scaled)
acc_linear = accuracy_score(y_test, y_pred_linear)

print("Linear SVM Classification Report:\n", classification_report(y_test, y_pred_linear))

# Train RBF SVM
rbf_svm = SVC(kernel='rbf', C=1, gamma='scale')
rbf_svm.fit(X_train_scaled, y_train)
y_pred_rbf = rbf_svm.predict(X_test_scaled)
acc_rbf = accuracy_score(y_test, y_pred_rbf)

print("RBF SVM Classification Report:\n", classification_report(y_test, y_pred_rbf))

# Visualize Decision Boundary using PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_train_scaled)

svm_pca = SVC(kernel='rbf', C=1, gamma='scale')
svm_pca.fit(X_pca, y_train)

# Create a mesh grid
x_min, x_max = X_pca[:, 0].min() - 1, X_pca[:, 0].max() + 1
y_min, y_max = X_pca[:, 1].min() - 1, X_pca[:, 1].max() + 1
xx, yy = np.meshgrid(np.linspace(x_min, x_max, 500),
                     np.linspace(y_min, y_max, 500))
Z = svm_pca.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.figure(figsize=(10, 6))
plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.3)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_train, cmap=plt.cm.coolwarm, edgecolors='k')
plt.title("Decision Boundary (RBF Kernel + PCA 2D)")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.show()

# Hyperparameter Tuning with GridSearchCV
param_grid = {
    'C': [0.1, 1, 10],
    'gamma': [0.001, 0.01, 0.1],
    'kernel': ['rbf']
}
grid = GridSearchCV(SVC(), param_grid, refit=True, cv=5)
grid.fit(X_train_scaled, y_train)

print("Best Parameters:", grid.best_params_)

# Visualize grid search scores
scores_matrix = grid.cv_results_['mean_test_score'].reshape(3, 3)

plt.figure(figsize=(8, 6))
sns.heatmap(scores_matrix, annot=True, xticklabels=param_grid['gamma'], yticklabels=param_grid['C'], cmap="YlGnBu")
plt.xlabel("Gamma")
plt.ylabel("C")
plt.title("Grid Search Mean Test Scores")
plt.show()

# Evaluate Best Model
best_svm = grid.best_estimator_
y_pred_best = best_svm.predict(X_test_scaled)
acc_best = accuracy_score(y_test, y_pred_best)
print("Best Tuned Model Classification Report:\n", classification_report(y_test, y_pred_best))

# Cross-Validation Scores
cv_scores = cross_val_score(best_svm, X, y, cv=5)
print("Cross-validation Scores:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))

# Compare Accuracy of All Models
models = ['Linear SVM', 'RBF SVM', 'Tuned SVM']
accuracies = [acc_linear, acc_rbf, acc_best]

plt.figure(figsize=(8, 5))
sns.barplot(x=models, y=accuracies, palette='Set2')
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.ylim(0.9, 1.0)
plt.show()
